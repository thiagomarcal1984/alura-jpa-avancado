Para criar uma relação ManyToMany (com uma tabela intermediária e sem outros 
campos além dos ids das tabelas relacionadas), basta usar:

    // classe Pedido:
	@ManyToMany
	@JoinTable("itens_pedido") // Não obrigatório. Nomeia tabela intermediária.
	private List<Produto> produtos;

Como no exercício a tabela intermediária contém outros atributos (quantidade e
preço da venda na época), é necessário criar uma entidade à parte.

    Pedidos <- ItemPedido -> Produto

    Pedidos mapeia @OneToMany para ItemPedido.
    ItemPedido mapeia @ManyToOne (inverso) para Pedidos e para Produto.
    Produto não tem o mapeamento bidirecional, como Pedido/ItemPedido.

Cuidado ao definir mapeamentos bidirecionais. Senão, outras tabelas são criadas
sem necessidade (no exemplo, seria a tabela pedidos_itens_pedido). Para evitar
essa duplicidade de tabelas com mesma função, use o parâmetro mappedBy na
anotação do relacionamento:
    // Código da classe Pedido:
	@OneToMany(mappedBy = "pedido")
	private List<ItemPedido> produtos;
    // Onde "pedido" corresponde ao nome da variável que representa a  
    // propriedade privada na classe ItemPedido que se relaciona com a 
    // classe Pedido.

Uma boa prática: para cada definição de lista nas entidades, instancie uma
implementação da lista, para evitar Null Pointer Exceptions.

Ao inserir conteúdo de uma relação ManyToMany, crie um método em uma das 
classes para inserir os dois objetos relacionados:

	public void adicionarPedido(ItemPedido item) {
		item.setPedido(this);
		this.itens.add(item);
	}

É importante que tabelas com relacionamento ManyToMany tenham efeito cascata na
inserção/alteração/exclusão de itens. Para isso, acrescente o parâmetro cascade
na anotação OneToMany:
	@OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL)
	private List<ItemPedido> itens = new ArrayList<>();

O nome das propriedades em cammelCase é substituido no banco de dados por 
snake_case nas entidades com relacionamento OneToMany ou ManyToOne. Isso não 
acontece no ManyToMany. As entidades que participam de um relacionamento 
ManyToMany precisam ter o nome da coluna redefinido para snake_case:

    // Classe ItemPedido
	@Column(name = "preco_unitario")
	private BigDecimal precoUnitario;

    // Classe Pedido
	@Column(name = "valor_total")
	private BigDecimal valorTotal;

A JPQL tem funções agregadas também (sum, avg, min, max etc.). Funções de 
agregação próprias do SGBD (se houverem) também podem ser usadas na JPQL:
	// classe PedidoDao
	public BigDecimal valorTotalVendido() {
		String jpql =  "SELECT SUM(p.valorTotal) FROM Pedido p";
		return em.createQuery(jpql, BigDecimal.class)
				.getSingleResult();
	}

No entanto, para que o resultado da consulta não seja nulo, o valor total do
pedido precisa ser atualizado sempre que um novo item de pedido for incluído:
	// A classe Pedido recupera o total do item...
	public void adicionarPedido(ItemPedido item) {
		item.setPedido(this);
		this.itens.add(item);
		this.valorTotal = valorTotal.add(item.getValor());
	}

	// ... e a classe ItemPedido calcula o total do item (quantidade x preço):
	public BigDecimal getValor() {
		return precoUnitario.multiply(new BigDecimal(quantidade));
	}

Como retornar resultados de JPQL com colunas de dados mistos: 
	1) Retornando uma lista com array de objetos (forma deselegante):
		public List<Object[]> relatorioDeVendas() {
			String jpql = "SELECT produto.nome, "
					+ "SUM(item.quantidade), "
					+ "MAX(pedido.data) "
					+ "FROM Pedido pedido "
					+ "JOIN pedido.itens item "
					+ "JOIN item.produto produto "
					+ "GROUP BY produto.nome "
					+ "ORDER BY item.quantidade DESC ";
			return em.createQuery(jpql, Object[].class)
					.getResultList();
		}

	2) Criando uma classe própria que retorne VO's (value objects sem setters;
	   repare na notação new, que cria um objeto e usa os resultados do JPQL
	   como parâmetro pra construir cada elemento do resultado):

	   // Perceba que, na JPQL, você precisa dizer o caminho completo para a
	   // a classe que você quer que retorne ao usar o comando new.
		public List<RelatorioDeVendasVo> relatorioDeVendas() {
			String jpql = "SELECT new br.com.alura.loja.vo.RelatorioDeVendasVo("
					+ "produto.nome, "
					+ "SUM(item.quantidade), "
					+ "MAX(pedido.data)) "
					+ "FROM Pedido pedido "
					+ "JOIN pedido.itens item "
					+ "JOIN item.produto produto "
					+ "GROUP BY produto.nome "
					+ "ORDER BY item.quantidade DESC ";
			return em.createQuery(jpql, RelatorioDeVendasVo.class)
					.getResultList();
		}

Named queries são JPQL declarados nas classes de entidade JPA do projeto. São 
chamadas no método createNamedQuery (ao invés de createQuery) do entityManager.
	// Classe Produto
	@NamedQuery(name = "Produto.produtosPorCategoria", 
		query = "SELECT p FROM Produto p WHERE p.categoria.nome = :nome")
	public class Produto { ...

	// Classe ProdutoDao
	public List<Produto> buscarPorNomeDaCategoria(String nome) {
		return em.createNamedQuery("Produto.produtosPorCategoria", Produto.class)
				.setParameter("nome", nome)
				.getResultList();
	}

Named queries parecem poluir a classe das entidades, e podem ser difíceis de
invocar e dar manutenção (repare que nos códigos o nome da named query foi 
precedido do nome da entidade que a contém, para facilitar a procura).

Por padrão, sempre que uma anotação ManyToOne ou OneToOne for usada, o JPA vai
incluir as entidades anotadas no select. Isso torna a performance do SQL pior.

Os comportamentos das anotações de relacionamento podem ser Eager ou Lazy. 
Por padrão o comportamento dos relacionamentos anotados com (?)ToOne é Eager,
e os relacionamentos anotados com (?)ToMany é Lazy.

O carregamento Lazy tem uma desvantagem: se o EntityManager estiver fechado 
quando uma entidade gerenciada contiver uma propriedade ainda não carregada,
uma exceção será lançada (LazyInitializationException: não é possível o 
carregamento lazy da entidade, porque a sessão foi fechada).

Para evitar essa exceção, é necessário criar uma query planejada que contenha
um JPQL com o comando JOIN FETCH. Essas palavras servem para carregar, apenas 
para o JPQL específico, o carregamento dos objetos que de outra forma seriam
carregadas de forma lazy:

	public Pedido buscarPedidoComCliente(Long id) {
		return em.createQuery(
			"SELECT p FROM Pedido p " + 
			"JOIN FETCH p.cliente WHERE p.id = :id", Pedido.class)
				.setParameter("id", id)
				.getSingleResult();
	}

Se você quiser criar consultas JPQL com parâmetros opcionais, você precisaria:
	1) criar um JPQL sem filtro (jpql = "SELECT p FROM Produto p WHERE 1=1 ");
	2) testar se os parâmetros opcionais estão preenchidos:
		(if (parm1 != null) {
			jpql += "AND parm1 = :parm1"
		});
	3) criar uma TypedQuery baseado na JPQL criada nos passos anteriores:
		TypedQuery<Produto> query = em.createQuery(jpql, Produto.class);
	4) setar os parâmetros opcionais na TypedQuery:
		(if (parm1 == null) {
			query.setParameter("parm1", parm1);
		}).

Isso é trabalhoso, porque duplica os ifs para cada parâmetro opcional.

Criteria API:
   public List<Produto> buscarPorParametrosComCriteria(String nome, 
         BigDecimal preco, LocalDate dataCadastro) {
      // Criar o construtor de critérios.
      CriteriaBuilder builder = em.getCriteriaBuilder();

      // Criar a query para a classe Produto (que resulta em objetos Produto).
      CriteriaQuery<Produto> query = builder.createQuery(Produto.class);

      // Cria um objeto Root, que corresponde à cláuslua FROM do JPQL.
      Root<Produto> from = query.from(Produto.class);

      // "Predicate filtros" receberá os filtros aplicáveis à JPQL.
      // builder.and() cria o primeiro predicado (" WHERE 1=1 ") na JPQL.
      Predicate filtros = builder.and();

      // Para cada parâmetro opcional, redefine os filtros com o builder.and().
      // O builder.equal() serve para comparar um valor X com um valor Y.
      // O método from.get(propriedade) retorna a referência a uma propriedade 
      // contida na entidade FROM referenciada no JPQL.
      if (nome != null && !nome.trim().isEmpty()) {
         filtros = builder.and(
            filtros, builder.equal(from.get("nome"), nome)
         );
      }
      if (preco != null) {
         filtros = builder.and(
            filtros, builder.equal(from.get("preco"), preco)
         );
      }
      if (dataCadastro != null) {
         filtros = builder.and(
            filtros, builder.equal(from.get("dataCadastro"), dataCadastro)
         );
      }
      query.where(filtros);
      return em.createQuery(query).getResultList();
   }

Embedded e Embeddable: classes grandes podem ser quebradas em classes menores.
A anotação Embeddable serve para indicar que a *classe* anotada será parte de 
outra entidade de banco de dados, não uma tabela à parte.

A anotação Embedded serve para indicar que as colunas da *propriedade* anotada
serão embutidas na tabela da entidade que contém a propriedade anotada.

Mapeamento de herança no JPA:

1) Mapeamento de tabela única na classe base:
	@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
	public class Produto { ... }

	// Usando essa estratégia, a tabela acaba recebendo uma coluna
	// no DB chamada DTYPE, que vai definir a classe do registro.

2) Mapeamento em que os atributos das subclasses ficam em tabelas separadas: 
	@Inheritance(strategy = InheritanceType.JOINED)
	public class Produto { ... }

Lembre-se: as anotações de herança com a anotação @Inheritance ficam sempre
na classe base.

Chaves compostas: na JPA, é necessário criar classes separadas para criar uma
chave composta e anotá-las com a anotação Embeddable. A classe que vai conter
a chave composta precisa anotar a propriedade de identificação com a a anotação
EmbeddedId.

É bom que a classe que representa a ID implemente a interface Serializable (?).
Framekworks de teste, por exemplo, podem exigir a implementação da interface.
